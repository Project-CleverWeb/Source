<?php
/**
 * SETUP PAGE
 * ------------------------------------
 * *instructions* [comeback]
 */


/**
 * Now put the information you gathered here.
 */

// database username
$MySQL_Username = "default";

// database password
$MySQL_Password = "default";

// database name
$MySQL_Name = "default";

// database host
$MySQL_Host = "default";

























/**
 * Advanced Users Only!
 * ----------------------------
 * EDIT AT YOUR OWN RISK!
 */

// Initializing $_CW as an stdClass (This preps it to be used in the core)
$_CW = stdClass; // Do not touch
$_CW->preinit = array();// Do not touch

// Searchs common directory names, this directory, and the directory above this one, if the core is not at this location.
$_CW->preinit['path'] = 'default'; // default is 'default'

// Localize CW (recommended)
$_CW->preinit['timezone'] = 'default'; // default is 'default' (server timezone)

// Decides the amount (if any) of errors to show.
$_CW->preinit['debug_level'] = 1; // default is 1

// Allow the default php to override CW's;
$_CW->preinit['php_error_handler'] = FALSE; // default is FALSE

// Defines the enviroment, if the selected enviroment is invalid, defaults to development.
$_CW->preinit['enviroment'] = 'development'; // default is 'production'

/**
 * Security Keys
 * ----------------
 * Automatically generated by default. Still just theory, the system isn't designed yet.
 * Set to 'default' to auto generate. (to regenrate, you must use dashboard OR set them yourself here)
 */
$_CW->preinit['sec_keys']['auth']              = 'default';
$_CW->preinit['sec_keys']['auth_salt']         = 'default';
$_CW->preinit['sec_keys']['secured_auth']      = 'default';
$_CW->preinit['sec_keys']['secured_auth_salt'] = 'default';
$_CW->preinit['sec_keys']['logged_in']         = 'default';
$_CW->preinit['sec_keys']['logged_in_salt']    = 'default';
$_CW->preinit['sec_keys']['nonce']             = 'default';
$_CW->preinit['sec_keys']['nonce_salt']        = 'default';
$_CW->preinit['sec_keys']['captcha_public']    = 'default';
$_CW->preinit['sec_keys']['captcha_private']   = 'default';









/*-------------------------------------------*\
 |                !!!STOP!!!                  |
 |                                            |
 |  Do not edit this file beyond this point!  |
\*-------------------------------------------*/

// ensure the enviroment is done correctly
switch(strtolower($_CW->preinit['enviroment'])) {
	case 'production':
		$_CW->preinit['enviroment'] = strtolower($_CW->preinit['enviroment']);
		break;
	case 'maintenance':
		$_CW->preinit['enviroment'] = strtolower($_CW->preinit['enviroment']);
		break;
	default:
		$_CW->preinit['enviroment'] = 'development';
		break;
}


/**
 * Development Safe Define
 * 
 * @param $name (string) the name of the constant you wish to define 
 * @param $default_value (mixed) The value of the constant you want in both production and maintenance enviroments.
 * @param $development_value (mixed) [optional] The value of the constant want in the development enviroment only.
 * @return (bool) TRUE on success, FALSE otherwise.
 */
function _define($name, $default_value, $development_value=NULL){
	global $_CW;
	$name = (string) $name;
	// Check if CW has started init
	if(CW_CORE_INIT==true){
		if(defined($name)){
			trigger_error('Previously Defined Constant: ' . $name, E_USER_WARNING);
			return FALSE;
		}
		else{
			if(($_CW->enviroment == 'production') || ($_CW->enviroment == 'maintenance') || is_null($development_value)){
				define($name, $default_value);
			}
			else{
				define($name, $development_value);
			}
		}
	}
	else{
		if(defined($name)){
			trigger_error('Previously Defined Constant: ' . $name, E_USER_WARNING);
			return FALSE;
		}
		else{
			if(($_CW->preinit['enviroment'] == 'production') || ($_CW->preinit['enviroment'] == 'maintenance') || is_null($development_value)){
				define($name, $default_value);
			}
			else{
				define($name, $development_value);
			}
		}
		return TRUE;
	}
}

/** Define a couple of basic Constants **/
_define('DS',DIRECTORY_SEPARATOR, '/'); // Shorter name for the php constant DIRECTORY_SEPARATOR.
_define('EOL', PHP_EOL); // Shorter name for the php constant PHP_EOL (End of line);

// Moving to /cleverweb/init.php
_define('REQUEST_URL', trim($_GET['url'],'/')); // Get the requested URL for parsing later.
_define('REQUEST_METHOD', $_SERVER['REQUEST_METHOD']);
_define('IS_POST', (REQUEST_METHOD === 'POST'));
_define('IS_GET', (REQUEST_METHOD === 'GET'));

// Moving to /cleverweb/init.php
$_CW->preinit['db_conn'] = new mysqli(
	(string) $MySQL_Host,
	(string) $MySQL_Name,
	(string) $MySQL_Username,
	(string) $MySQL_Password
);
unset($MySQL_Host,$MySQL_Name,$MySQL_Password,$MySQL_Username);
/**
 * MySQLi tables list:
 * 	Settings
 * 	Users
 * 	Blog
 * 	Forum
 * 	Comments (non forum)
 */
// pass over to mysqli handler

/**
 * find CW core, we should only need to do this once, so no functions.
 * cwid.php sets the path to the core.
 */
if(empty($_CW->preinit['path'])){
	$_CW->preinit['path'] = '.'; // allow 'default' as the file name
}
$_CW->preinit['path'] = (string) $_CW->preinit['path'];
$_CW->preinit['temp'] = array(
	$_CW->preinit['path'], // search here first
	'cleverweb','CleverWeb','cw','CW','clever','core','cms','CMS'
);

$_CW->preinit['tempcount'] = count($_CW->preinit['temp']);
$_CW->preinit['i'] = 0;
foreach ($_CW->preinit['temp'] as $_CW->preinit['arrayvalue']) {
	$_CW->preinit['i']++;
	
	// no trailing slashes
	$_CW->preinit['arrayvalue'] = rtrim($_CW->preinit['arrayvalue'],"/");
	$_CW->preinit['arrayvalue'] = rtrim($_CW->preinit['arrayvalue'],"\\");
	
	// check here
	if(file_exists(__DIR__.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php')){
		include_once __DIR__.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php';
		if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
			break;
		}
	}
	elseif($_CW->preinit['i']==1){
		if(file_exists(__DIR__.DS.'cwid.php')){
			include_once __DIR__.DS.'cwid.php';
			if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
				break;
			}
		}
	}
	// check above
	elseif(file_exists(__DIR__.DS.'..'.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php')){
		include_once     __DIR__.DS.'..'.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php';
		if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
			break;
		}
	}
	// check way above
	elseif(file_exists(__DIR__.DS.'..'.DS.'..'.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php')){
		include_once     __DIR__.DS.'..'.DS.'..'.DS.$_CW->preinit['arrayvalue'].DS.'cwid.php';
		if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
			break;
		}
	}
	// check the heavens
	elseif(file_exists(DS.$_CW->preinit['arrayvalue'].DS.'cwid.php')){
		include_once     DS.$_CW->preinit['arrayvalue'].DS.'cwid.php';
		if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
			break;
		}
	}
	
	if($_CW->preinit['tempcount']==$_CW->preinit['i']){
		// check the last place on earth, the cwip.php should not be here.
		if(file_exists('.'.DS.'cwid.php')){
			include_once '.'.DS.'cwid.php';
			if(defined('CW_CORE_EXISTS') && CW_CORE_EXISTS===TRUE){
				// Trigger warning for having it in an unsecure place
				break;
			}
		}
		// We tried our hardest and failed... time to break the bad news.
		exit('CW Error: The core could not be found! Please check $_CW->preinit[\'path\'] in your settings.php file');
	}
}
unset($_CW->preinit['temp'],$_CW->preinit['arrayvalue'],$_CW->preinit['i'],$_CW->preinit['tempcount']); // little clean up
// END find CW core


include_once $_CW->preinit['path'].DS.'init.php' // (init the core)


//EOF